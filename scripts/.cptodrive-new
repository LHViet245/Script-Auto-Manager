#! /bin/bash
#############################################################################################
######################################## CONFIG #############################################
root_folder=
drive_name=
script_name="$(basename "$0")"
source_script="$HOME/.auto-manager-server/$(echo "$script_name" | tr -d '.')"
cptodriveCOMP="$source_script"/"$(echo "$script_name" | tr -d '.')"_COMP.txt
cptodriveFAIL="$source_script"/"$script_name"_FAIL.txt
cptodriveDONE="$source_script"/"$script_name"_DONE.txt
config_file="$source_script/config"
log_rclone="$source_script/log"

[[ ! -d "$source_script" ]] && mkdir -p "$source_script"
[[ ! -d "$config_file" ]] && mkdir -p "$config_file"
[[ ! -d "$log_rclone" ]] && mkdir -p "$log_rclone"

if [[ -f "$(which get-function)" ]] ;then
	. get-function "color"
else
	echo -e "\nGet color function error. Will run without color\n"
fi
#############################################################################################
####################################### FUNCTION ############################################

function version() {
	version="2.1.2"
}

# Function get Filename
function ask_user() {
local answer
while true
  do
    read -r -n 1 answer
    case $answer in [Yy]* ) return 0 ;;
                    [Nn]* ) return 1 ;;
                        * ) echo "${Red}Enter y or n${NC}";;
    esac
  done
}

function filename() {
	filename=$(basename "$file")
    #extension=${filename##*.}
    #name=${filename%.*}
return
}

#Function Rclone
function copytodrive() {
# Check file is Dicrectory or file
[[ -d "$file" ]] 2>/dev/null && echo -e "${Yellow}[$filename]${NC} ${Lightblue}is a directory${NC}"
echo -e "${Lightblue}Start copying file${NC} ${Yellow}[$filename]${NC} to Remote ${Yellow}[$drive_name:$root_folder]${NC}\n"
# Run Rclone
if ! rclone copy -P "$file" "$drive_name:$root_folder/$filename" --fast-list --create-empty-src-dirs --ignore-existing --log-file="$log_rclone/log_rclone_$(date '+%d%m%Y').txt" --log-level DEBUG;then
	echo "$filename" >> "$cptodriveFAIL"
else
	echo "$filename" >> "$cptodriveCOMP"
fi
}

function copytodriveAUTO() {
echo -e "${Lightcyan}Automatically create folders sorted by date? (y/n)${NC}"
ask_user && root_folder="$root_folder/$(date '+%d-%m-%Y')"
if [[ $# -eq 0 ]] ;then
	for file in * ;do
		filename "$file"
		if [[ -e "$file" ]] 2>/dev/null;then
			#text=$(grep -wF "$filename" "$cptodriveCOMP")
			if [[ "$filename" == "$(grep -wF "$filename" "$cptodriveCOMP")" ]] 2>/dev/null ;then
				echo "$filename" >> "$cptodriveDONE"
			else
				echo -e "\n${Lightblue}Confirm${NC} ${Yellow}[$filename]${NC} ${Lightblue}has not been copied to Remote${NC} ${Yellow}[$drive_name]${NC}"
				copytodrive "$file"
			fi
		fi
	done
else
	for file in "$@" ;do
		filename "$file"
		if [ -e "$file" ] ;then
			#text="$(grep -wF "$filename" "$cptodriveCOMP")"
			if [ "$filename" == "$(grep -wF "$filename" "$cptodriveCOMP")" ] 2>/dev/null ;then
				#echo -e "${Yellow}[$filename]${NC} ${Green}Da Copy Sang Drive${NC} ${Yellow}[vietle]${NC}"
				echo "$filename" >> "$cptodriveDONE"
			else
				echo -e "${Lightblue}Confirm${NC} ${Yellow}[$filename]${NC} ${Lightblue}has not been copied to Remote${NC} ${Yellow}[$drive_name]${NC}\n"
				copytodrive "$file"
			fi
		else 
			echo -e "\n${Red}Does not exist${NC} ${Yellow}[$filename]${NC}"
			echo -e "${Red}Please Check Again${NC}\n"
			echo "$filename does not exist" >> "$cptodriveFAIL"
		fi
	done
fi
# List File Done or Completed or FAIL
checkfile "$@"
}

function config_drive_name_remote() {
local num=1
local choice
local remote

echo -e "\n${Orange}List remote:${NC}"
while IFS= read -r remote ;do
    local remote[$num]="$remote"
    if [[ $num -lt 10 ]]; then
			echo -e "\t\t ${BWhite}$num.${NC} ${Lightblue}${remote[$num]}${NC}"
	else
			echo -e "\t\t${BWhite}$num.${NC} ${Lightblue}${remote[$num]}${NC}"
	fi
    ((num++))
done < <(rclone listremotes | awk -F: '{print $1}')
echo -e "${Lightcyan}Select the remote you want to use: ${NC}"
read -r choice
if [[ $choice -lt $num ]] && [[ $choice -ge 1 ]] && [[ "$choice" =~ ^[0-9]+$ ]] ;then
    num=$choice
    drive_name="${remote[$num]}"
    echo -e "${Yellow}[$drive_name]${NC} ${Lightblue}selected successfully${NC}\n"
else
clear
    echo -e "${Red}Invalid choice${NC}"
    echo -e "${Red}Sorry! integers only or wrong number\nTRY AGAIN!!${NC}\n"
    config_drive_name_remote
fi
}

function config_root_folder() {
local foldersub
local foldersub_new
local num
local previous_directory
local skip_loop="no"
while true; do
	if [[ "$skip_loop" != "yes" ]] ;then
		num=1
		while IFS= read -r foldersub; do
			foldersub[$num]="$foldersub"
			if [[ $num -lt 10 ]]; then
				echo -e "\t\t ${Lightcyan}$num.${NC} ${Lightblue}${foldersub[$num]}${NC}"
			else
				echo -e "\t\t${Lightcyan}$num.${NC} ${Lightblue}${foldersub[$num]}${NC}"
			fi
			((num++))
		done < <(rclone lsd "$drive_name:$root_folder" | awk -F '-1 ' '{print $NF}')
	fi
	if [[ "$num" -lt 2 ]] && [[ -z "$foldersub" ]] || [[ "$skip_loop" == "yes" ]];then echo -e "${Purple}No directory found${NC}" ;fi 
	
	echo -e "\n${Orange}CURRENT DICRECROTY:${NC}  ${Cyan}'$drive_name:$root_folder'${NC}"
	echo -e "${Lightcyan}Select Folder or type new folder in here. You can use command behind${NC}"
	#echo -e "--showfile | --drive-name"
	echo -e "${Lightcyan}Type 2 dot${NC} ${Cyan}'..'${NC} ${Lightcyan}to go previous folder |${NC} ${UWhite}Enter blank to finish.${NC}"
	read -r foldersub_new
	[[ -z "$foldersub_new" ]] && echo -e "${BGreen}SUCCESS get root folder${NC} ${Yellow}'$drive_name:$root_folder'${NC}\n" && return 0
	if { [[ "$foldersub_new" -lt $num ]] && [[ "$foldersub_new" -ge 1 ]] && [[ "$foldersub_new" =~ ^[0-9]+$ ]];} 2>/dev/null; then
		num=$foldersub_new
		previous_directory="$root_folder"
		root_folder="$root_folder/${foldersub[$num]}"
clear
		echo -e "${Yellow}[${foldersub[$num]}]${NC} ${Lightblue}selected successfully${NC}\n"
	elif [[ "$foldersub_new" == ".." ]] ;then
clear
		echo -e "${Orange}Go Back${NC}\n" 
		root_folder="$previous_directory"
		previous_directory="$(echo "$root_folder" | sed -e's,^\(.*\/\).*,\1,g' | sed 's/.$//')"
		if ! rclone lsd "$drive_name:$root_folder" > /dev/null 2>&1 ;then
			skip_loop="yes"
		else
			skip_loop="no"
		fi
	else
		if [[ "$skip_loop" != "yes" ]];then
			for (( i=1; i < $num; i++ )) ;do
				if [[ "$foldersub_new" == "${foldersub[$i]}" ]] ;then
clear
					echo -e "${Yellow}Directory already exists. Will access this folder${NC}\n"
					root_folder="$root_folder/$foldersub_new"
					config_root_folder
					return
				fi
			done
		fi
clear
			previous_directory="$root_folder" 
			root_folder="$root_folder/$foldersub_new"
			echo -e "${Lightblue}Success create new folder${NC} ${Cyan}'$foldersub_new'${NC}\n"
			skip_loop="yes"
	fi
done
}

function checkfile() {
local list
	## List File Completed
if [[ -f "$cptodriveCOMP" ]] 2>/dev/null ;then
	echo -e "\n${BGreen}[COMPLETED]${NC}"
	while IFS= read -r list ;do
		if [[ "$list" != "---------------------------" ]] ;then
			echo -e "${Green}"$list"${NC}"
		else
			echo -e "$list"
		fi
	done < <(tail -n $(($# + 4)) "$cptodriveCOMP") 2>/dev/null 
fi
	## List File Done
if [[ -f "$cptodriveDONE" ]] 2>/dev/null ;then
	echo -e "\n${BYellow}[Done]${NC}"
	if [ $# -gt 20 ] 2>/dev/null ;then
		echo -e "${Purple}MORE...${NC}"
		while IFS= read -r list ;do
			if [[ "$list" != "---------------------------" ]] ;then
				echo -e "${Yellow}"$list"${NC}"
			else
				echo -e "$list"
			fi
		done < <(tail -n 10 "$cptodriveDONE") 2>/dev/null
	else
		while IFS= read -r list ;do
			if [[ "$list" != "---------------------------" ]] ;then
				echo -e "${Yellow}"$list"${NC}"
			else
				echo -e "$list"
			fi
		done < <(tail -n $(($# + 4)) "$cptodriveDONE") 2>/dev/null
	fi
	rm "$cptodriveDONE" 2>/dev/null
fi
	## List File Fail
if [[ -f "$cptodriveFAIL" ]] 2>/dev/null ;then
	echo -e "\n${BRed}[FAIL]${NC}"
	while IFS= read -r list ;do
		if [[ "$list" != "---------------------------" ]] ;then
			echo -e "${Red}"$list"${NC}\t${BRed}FAIL${NC}"
		else
			echo -e "$list"
		fi
	done < <(tail -n $(($# + 4)) "$cptodriveFAIL") 2>/dev/null
	rm "$cptodriveFAIL" 2>/dev/null
fi
}

function process_config() {
case "$1" in
	create_and_show ) # Create and show config
			config_name="$drive_name"_"$(echo "$root_folder" | awk -F '/' '{print $NF}')"_"$(date '+%d-%m-%Y')".config
			echo -e "${Lightcyan}By default, the config file will be saved in${NC} ${Cyan}'$config_file/'${NC}"
			echo -e "${Lightcyan}Enter the name you want to give the config file. No need${NC} ${Cyan}'.config'${NC} ${Lightcyan}| Default name:${NC} ${Cyan}'$config_name'${NC}"
			echo -e "${Lightcyan}If the config file has the same name as the existing file, it will be overwritten.${NC}"
			echo -e "${UWhite}Enter blank to set default name${NC}"
			read -r config_name1
			[[ $(echo "$config_name1" | awk -F '.' '{print $NF}') != "config" ]] && [[ -n "$config_name1" ]] && config_name="$config_name.config"
			dir_filecfg="$config_file/$config_name"
echo -e "======== SCRIPT MADE BY STARFALL ========
Script name : $(echo "$script_name" | tr -d '.')
Version : $version
Created : $(date '+%d-%m-%Y')
Drive Name : $drive_name
Root Folder : $root_folder
=========================================
Default run : NO" > "$dir_filecfg"
			echo -e "${Lightcyan}Set default this config file for next run? (y/n)${NC}"
			ask_user && sed -i '/^\(\s\|#\)*Default run/ c\Default run : YES' "$dir_filecfg"
			head -n 7 "$dir_filecfg"
	;;

	show ) # Only show config
			head -n 7 "$dir_filecfg"
	;;

	read_config ) # Read config file
			if testvercomp "$(grep -w '^Version' "$dir_filecfg" | awk -F: '{print $NF}' | sed 's/ //g')" "$version" ">" ;then
				echo -e "${Red}The version of the script is old, not suitable for this config file. Please update to the new version!${NC}"
				exit 1
			else
				drive_name="$(grep -w '^Drive Name' "$dir_filecfg" | awk -F: '{print $NF}' | sed 's/ //g')"
				root_folder="$(grep -w '^Root Folder' "$dir_filecfg" | awk -F: '{print $NF}' | sed 's/ //g')"
			fi
	;;

	run_config ) # Load config file

			local num_file=1

			echo -e "${Orange}List Config:${NC}\n"
			while IFS= read -r filecfg ;do
				if [[ -f "$filecfg" ]] ;then
					config_name[$num_file]="$(basename "$filecfg")"
					if [[ $num_file -lt 10 ]]; then
							echo -e "\t\t ${BWhite}$num_file.${NC} ${Lightblue}${config_name[$num_file]}${NC}"
					else
							echo -e "\t\t${BWhite}$num_file.${NC} ${Lightblue}${config_name[$num_file]}${NC}"
					fi
				fi
				((num_file++))
			done< <(find "$config_file" -type f -name "*.config") 2>/dev/null

			echo -e "\n${Orange}Found${NC} ${Cyan}$(($num_file - 1))${NC} ${Orange}config files${NC}\n"
			if [[ $(($num_file - 1)) -eq 0 ]] ;then
				echo -e "${Purple}No config found${NC}"
				echo -e "${Green}Will configure the drive now.${NC}"
				config_drive_name_remote
				sleep 0.5
				config_root_folder
				process_config "create_and_show"
			else
				echo -e "${Lightcyan}Select the config file you want to use.${NC}"
				echo -e "${Lightcyan}Type${NC} ${Cyan}'config'${NC} ${Lightcyan}to create a new config file. By default, the config file will be saved in${NC} ${Cyan}'$config_file'${NC}"
				echo -e "${Lightcyan}Type${Nc} ${Cyan}'show [number]'${NC} ${Lightcyan}to see config file information. Eg.${NC} ${Cyan}'show 1'${NC}"
				echo -e "${Lightcyan}Type${Nc} ${Cyan}'rm [number]'${NC} ${Lightcyan}to delete config file. Eg.${NC} ${Cyan}'rm 1'${NC}"
				echo -e "${UWhite}Enter blank will automatically load the first config file.${NC}"
				read -r new_config
					
				if { [[ "$new_config" -lt $num_file ]] && [[ "$new_config" -ge 1 ]] && [[ "$new_config" =~ ^[0-9]+$ ]];} 2>/dev/null; then
					num_file=$new_config
					dir_filecfg="$config_file/${config_name[$num_file]}"
					echo -e "${Lightcyan}Set default this config file for next run? (y/n)${NC}"
					ask_user 2>/dev/null && sed -i '/^\(\s\|#\)*Default run/ c\Default run : YES' "$dir_filecfg"
					process_config "read_config"
				elif [[ -z "$new_config" ]] ;then
					num_file=1
					dir_filecfg="$config_file/${config_name[$num_file]}"
					echo -e "${Lightcyan}Set default this config file for next run? (y/n)${NC}"
					ask_user 2>/dev/null && sed -i '/^\(\s\|#\)*Default run/ c\Default run : YES' "$dir_filecfg"
					process_config "read_config"
				elif [[ "$new_config" == "config" ]] ;then
clear
					config_drive_name_remote
					sleep 0.5
					config_root_folder
					process_config "create_and_show"
				elif [[ ${new_config:0:4} == "show" ]] && [[ $(echo "$new_config" | awk '{print $NF}') =~ ^[0-9]+$ ]] && [[ $(echo "$new_config" | awk '{print $NF}') -lt "$num_file" ]];then
						num_file=$(echo "$new_config" | awk '{print $NF}')
						dir_filecfg="$config_file/${config_name[$num_file]}"
						! less -X "$dir_filecfg" && clear && echo -e "${RED}File not found! Check Again! ${NC}" || clear
						process_config "run_config"
				elif [[ ${new_config:0:2} == "rm" ]] && [[ $(echo "$new_config" | awk '{print $NF}') =~ ^[0-9]+$ ]] && [[ $(echo "$new_config" | awk '{print $NF}') -lt "$num_file" ]];then
						num_file=$(echo "$new_config" | awk '{print $NF}')
						dir_filecfg="$config_file/${config_name[$num_file]}"
						! rm "$dir_filecfg" && clear && echo -e "${RED}File not found! Check Again! ${NC}" || clear
						process_config "run_config"
				else
clear
					echo -e "${Red}Invalid choice. Please chose again!${NC}\n"
					run_config
				fi
			fi

	;;	

	   * ) # Error to run fucntion
clear
	   		echo -e "${Red}ERROR to process config${NC}"
			echo -e "${Red}Check function${NC} ${Purple}'process_config'${NC} ${Red}at line${NC} ${Purple}216${NC} ${Red}in file${NC} ${Purple}'$0'${NC}"
			exit 216
	;;
esac
}

vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

testvercomp () {
    vercomp $1 $2
    case $? in
        0) op='=';;
        1) op='>';;
        2) op='<';;
    esac
    if [[ $op != $3 ]]
    then
        #echo "FAIL: Expected '$3', Actual '$op', Arg1 '$1', Arg2 '$2'"
		return 1
    else
        #echo "Pass: '$1 $op $2'"
		return 0
    fi
}

function menuRclone() {
local choice
local skip_config
local folder
local dir_arg
local file_extension
local file
local new_version
	# Check new version !
new_version="$(curl -v --silent https://raw.githubusercontent.com/LHViet245/Script-Auto-Manager/main/scripts/.cptodrive-new 2>&1 | grep -wE 'version="([0-9]{1,}\.)+[0-9]{1,}"' | awk -F '=' '{print $NF}' | tr -d '"')"
testvercomp "$new_version" "$version" ">" 2>/dev/null && echo -e "\t\t${BPurple}NEW VERSION${NC} ${Bcyan}$new_version${NC} ${BPurple}HAS BEEN ! YOU CAN UPDATE IN MENU.${NC}\n"

echo -e -n "${BGreen}Loaded:${NC} ${Cyan}$(basename "$dir_filecfg")${NC}\t${BGreen}Created:${NC}${Cyan}$(grep -w '^Created' "$dir_filecfg" | awk -F: '{print $NF}')${NC}\t${BGreen}Config version:${NC}${Cyan}$(grep -w '^Version' "$dir_filecfg" | awk -F: '{print $NF}')${NC}\t${BGreen}Default:${NC}${Cyan}$(grep -w '^Default run' "$dir_filecfg" | awk -F: '{print $NF}')${NC}"

echo -e "\n${BWhite}Main Menu: What would you like to do?${NC}\n"
echo -e "${BWhite}Press the number of your choice:${NC}\n"
echo -e "${BWhite}	1 - Default copy to root folder -${NC} ${Cyan}$drive_name:$root_folder${NC}"
echo -e "${BWhite}	2 - Create more folders in the root folder -${NC} ${Cyan}$drive_name:$root_folder/FOLDER_HERE/${NC}"
echo -e "${BWhite}	3 - Copy files by extension .EG:${NC} ${Cyan}srt | mp4 | mp3 | txt ...${NC}"
echo -e "${BWhite}	4 - Reset default config file.${NC}"
echo -e "${BWhite}	5 - Update version.${NC}"
echo -e "${BWhite}	0 - Exit${NC}"

# Wait for user to make a choice and run chosen functions:	
read -r -n 1 -s choice;

	case $choice in 
		
		1 )	# Copy File Sang Drive Mac Dinh /syncc/
clear
			echo -e "\n---------------------------" >> "$cptodriveCOMP"
			copytodriveAUTO "$@"
		
		;;
		
		2 )  # Tao Thu Muc Dich Den /syncc/FOLDER_HERE/""
clear
			echo -e "\n---------------------------" >> "$cptodriveCOMP"
			echo -e "${Lightcyan}Name of the folder you want to create: ${NC}"
			read -r folder
			[[ -n "$folder" ]] 2>/dev/null && root_folder="$root_folder/$folder" && echo -e "${Lightblue}Confirm that you have created an additional folder${NC} ${Yellow}[$drive_name:$root_folder]${NC}"
			copytodriveAUTO "$@"
	
		;;
		
		3 )	# Chi Copy File Subtitle .srt
clear
			echo -e "\n---------------------------" >> "$cptodriveCOMP"
			echo -e "${Lightcyan}Enter the name of the extension file you want to copy to the remote drive ${NC}"
			echo -e "${Lightcyan}Enter only the filename extension, no dot${NC} ${Cyan}' . '${NC}"
			echo -e "${Lightcyan}Extended file names must be separated by commas${NC} ${Cyan}' , '${NC} ${Lightcyan}contiguous.${NC}"
			echo -e "${Lightcyan}Eg:${NC} ${Cyan}srt,mp4,mp3,txt${NC}"
			read -r file_extension
			echo -e "${Lightcyan}Name of the folder you want to create more: ${NC}"
			read -r folder

			file_extension="$(echo "$file_extension" | sed 's/ //g')"
			[[ "$(echo "$file_extension" | grep -c ",")" -eq 0  ]] && file_extension="$file_extension,"
			for arg in "$@" ;do
				dir_arg="$(readlink -f "$arg")"
				if [[ -d "$dir_arg" ]] || [[ $# -eq 0 ]] ;then
					if [[ "$SHELL" == "$(which zsh)" ]] 2>/dev/null;then
						setopt -s nullglob
					else
						shopt -s nullglob
					fi
					[[ $# -eq 0 ]] 2>/dev/null && dir_arg="$PWD"
					for file in "$dir_arg"/*.{$file_extension} ;do
						filename "$file"
						if [ -f "$file" ] 2>/dev/null ;then
							#text="$(grep -wF "$filename" "$cptodriveCOMP")"
							if [ "$filename" == "$(grep -wF "$filename" "$cptodriveCOMP")" ] 2>/dev/null ;then
								# echo -e "${Yellow}[$filename]${NC} ${BGreen}Da Copy Sang Drive${NC} ${Yellow}[vietle]${NC}"
								echo "$filename" >> "$cptodriveDONE"
							else
								if ! copytodrive "$file" ;then
									echo "$filename" >> "$cptodriveFAIL"
								else
									echo "$filename" >> "$cptodriveCOMP"
								fi
							fi
						else 
							echo "$filename" >> "$cptodriveFAIL"
						fi
					done
				fi
			done
				## List file Completed or Fail or Done
			checkfile
		
		;;

		4 ) # Reset setting
			echo -e "\n${Lightcyan}Are you sure to reset the config file? or Setting new config (y/n)${NC}"
			ask_user && sed -i '/^\(\s\|#\)*Default run/ c\Default run : NO' "$dir_filecfg"
			"$0" "$@"
		;;

		5 ) # Update Script
			if testvercomp "$new_version" "$version" ">" 2>/dev/null;then
				if ! curl -o "$(dirname "$(readlink -f "$0")")/$script_name" "https://raw.githubusercontent.com/LHViet245/Script-Auto-Manager/main/scripts/.cptodrive-new" 2>/dev/null ;then
					echo -e "${Red}Upgrade failed. Upgrade download failed!${NC}"
					exit 1
				else
					chmod +x "$(dirname "$(readlink -f "$0")")/$script_name"
					echo -e "${Green}Successful upgrade version${NC} ${Lightcyan}'$new_version'${NC}${Green}. You can use it now!${NC}"
					exit 0
				fi
			else
				echo -e "${Green}You are using the latest version${NC} ${Lightcyan}'$new_version'${NC}"
			fi
		;;

		0 ) #Exit
clear
			echo -e "${Lightblue}Exited${NC}"
			return 0
		;;
		
		* ) # Not Valid Choice
clear
			echo -e "\n${Red}Not a valid choice${NC}"
			echo -e "${Red}Please choice some number${NC}\n"
			menuRclone "$@"
		;;
		
	esac

}




################ RUNNING SCRIPT #######################
clear
version

# Debug clear mode
if [[ "$1" == "debug-on" ]] ;then
	sed -i '/^\(\s\|#\)*clear/ c\#clear' "$0"
	echo -e "${BGreen}DEBUG ON${NC}"
	exit 0
elif [[ "$1" == "debug-off" ]] ;then
	sed -i '/^\(\s\|#\)*clear/ c\clear' "$0"
	echo -e "${Red}DEBUG OFF"
	exit 0
fi
# Check config file
while IFS= read -r filecfg_check ;do
	if [[ "$(grep -w '^Default run' "$filecfg_check" | awk -F: '{print $NF}' | sed 's/ //g')" == "YES" ]] 2>/dev/null ;then
		skip_config="yes"
		dir_filecfg="$filecfg_check"
		process_config "read_config"
	else
		skip_config="no"
	fi
done< <(find "$config_file" -type f -name '*.config') 2>/dev/null

[[ "$skip_config" != "yes" ]] && process_config "run_config"

# Run menu
clear
echo -e "\n\t\t\t\t${Orange}+----------------------+${NC}"
echo -e "\t\t\t\t${Orange}| ${On_Purple}Rclone Copy To Drive${NC} ${Orange}|${NC}"
echo -e "\t\t\t\t${Orange}+----------------------+${NC}"
echo -e "\t\t\t\t  ${Lightcyan}SCRIPT VERSION:${NC} ${Cyan}$version${NC}\n"
menuRclone "$@"
echo -e "\n${Lightcyan}DONE ALL${NC}"
echo -e "${Lightcyan}THANK YOU FOR USING!${NC}"
################### END SCRIPT ######################
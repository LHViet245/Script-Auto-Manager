#! /bin/bash
######################################################################################
#############################################
#
# Script made by Starfall 
# Auto autosub By BingLingGroup .Soucre: "https://github.com/BingLingGroup/autosub"
# Auto Translate
# 
#
##############################################
######################################################################################


# History patch
autosubcomp="$HOME/check/AutosubCOMP.txt"
autosubfail="$HOME/check/AutosubFAIL.txt"
autosubdone="$HOME/check/AutosubDONE.txt"

[ ! -d "$HOME/check" ] && mkdir "$HOME/check"
[ ! -f "$autosubcomp" ] && touch "$HOME/check/AutosubCOMP.txt"
[ ! -f "$autosubfail" ] && touch "$HOME/check/AutosubFAIL.txt"
[ ! -f "$autosubdone" ] && touch "$HOME/check/AutosubDONE.txt"

# Variable
S="ja-jp"
mnrs=0.3
mxrs=5
mxcs=0.3
et=2
f="srt"
d="vi"
src="en"
tailnum=$(($# + 6))

# Variable Color for text
LIGHTCYAN=$'\e[1;37m'
ORANGE=$'\e[0;33m'
GREEN=$'\e[0;32m'
RED=$'\e[0;31m'
YELLOW=$'\e[1;33m'
LIGHTBLUE=$'\e[1;34m'
NC=$'\e[0m' ## No Color

# Function Basename
filebasename() {
	filename=$(basename "$file")
	filepath=$(dirname "$file")
	name=${filename%.*}
return
}

# Function Show Config
function config {
echo -e "${LIGHTCYAN}\n==============CONFIG==============${NC}"
echo -e "${LIGHTCYAN}Speed Language:        ${YELLOW}$S${NC}     |${NC}"
echo -e "${LIGHTCYAN}SRC Language:          ${YELLOW}$src${NC}        |${NC}"
echo -e "${LIGHTCYAN}Destination Language:  ${YELLOW}$d${NC}        |${NC}"
echo -e "${LIGHTCYAN}Minimum Region Size:   ${YELLOW}$mnrs${NC}       |${NC}"
echo -e "${LIGHTCYAN}Maximum Region Size:   ${YELLOW}$mxrs${NC}         |${NC}"
echo -e "${LIGHTCYAN}Max Continuous SL:     ${YELLOW}$mxcs${NC}       |${NC}"
echo -e "${LIGHTCYAN}Energy Threshold:      ${YELLOW}$et${NC}         |${NC}"
echo -e "${LIGHTCYAN}Subtitles Format:      ${YELLOW}$f${NC}       |${NC}"
echo -e "${LIGHTCYAN}===================================${NC}\n"
}

# function to ask user for y/n response
ask_user() {
local answer
while true
  do
    read -r answer
    case $answer in [Yy]* ) return 0 ;;
                    [Nn]* ) return 1 ;;
                        * ) echo "Enter y or n";;
    esac
  done
}

# Function Cleanup
cleanAutosub() {
	sudo find /tmp -type f -name "*.flac" -delete 2>/dev/null
	sudo find /tmp -type f -name "*.wav" -delete 2>/dev/null
return
}

# Run autosub with Audio Processing
autosub-with-ap () {
	echo -e "\n${LIGHTBLUE}Starting Autosub${NC} ${YELLOW}[$filename]${NC}"
	echo -e "\n${LIGHTBLUE}Autosub With Audio Processing (-ap)${NC}\n"
	autosub \
	--input "$file"  \
	-sapi gcsv1 \
	--speech-language $S \
	--min-region-size $mnrs \
	--max-region-size $mxrs \
	--energy-threshold $et \
	--max-continuous-silence $mxcs \
	--not-strict-min-length \
	--drop-empty-regions \
	--yes \
	--audio-process y
	sleep 0.3
	cleanAutosub
}

# Run autosub without Audio Processing
autosub-without-ap () {
	echo -e "\n${LIGHTBLUE}Starting Autosub${NC} ${YELLOW}[$filename]${NC}"
	echo -e "\n${LIGHTBLUE}Autosub Without Audio Processing (-ap)${NC}\n"
	autosub \
	--input "$file"  \
	-sapi gcsv1 \
	--speech-language $S \
	--min-region-size $mnrs \
	--max-region-size $mxrs \
	--energy-threshold $et \
	--max-continuous-silence $mxcs \
	--not-strict-min-length \
	--drop-empty-regions \
	--yes \
	sleep 0.3
	cleanAutosub
}

# Function Translate Subtitle
# Rename Subtitle to .srt only and Remove file Subtitle Origin
Translate() {
	echo -e "\n${LIGHTCYAN}==================================${NC}"
echo -e "         ${LIGHTCYAN}CONFIG TRANSLATE        |${NC}"
echo -e "${LIGHTCYAN}SRC Language: 	       ${YELLOW}$S${NC}     |${NC}"
echo -e "${LIGHTCYAN}Destination Language:  ${YELLOW}$d${NC}        |${NC}"
echo -e "${LIGHTCYAN}==================================${NC}\n"
echo -e "${LIGHTBLUE}Starting Translate${NC} ${YELLOW}[$filename]${NC}\n"
	autosub \
	--input "$PWD/$name.$S.$f" \
	--src-language $src \
	--dst-language $d \
	--format $f
	sleep 0.3
	! mv "$filepath/$name.$S.$d.$f" "$filepath/$name.$f" 2>/dev/null && rm "$filepath/$name.$S.$f" 2>/dev/null
}






control-autosub () {
clear
echo -e "${LIGHTCYAN}Skip using Audio Process?${NC}"
if ! ask_user ;then
	continuous
else
	echo -e "\n${LIGHTBLUE}Confirmed skipping using Audio Process${NC}"
	noap="yes"
fi
# Autosub all video files in the directory running the script
if [ $# -eq 0 ] ;then
	echo -e "\n${GREEN}AUTOSUB ALL VIDEO FILES IN FOLDERS${NC}\n"
	find . -type f \( -name '*.mp4' -o -name '*.mkv' -o -name '*.avi' -o -name '*.wmv' -o -name '*.ts' -o -name '*.TS' -o -name '*.mov' -o -name '*.m4v' -o -name '*.flv' \) -exec echo '{}' \; > "$HOME/listfile.txt"
	while IFS= read -r file ;do
		if [ -f "$file" ] ;then
			filebasename "$file"
			## Check file Completed
			if [ "$(grep -wF "$filename" "$autosubcomp")" == "$filename" ] 2>/dev/null ;then 
				echo "$filename" >> "$autosubdone" 
				echo -e "\n${YELLOW}This video file has been Autosub${NC} ${GREEN}[$filename]${NC}\n"
			else
				config
				! ( if [ $noap == "yes" ] ;then
					autosub-without-ap "$file"
				else
					! autosub-with-ap "$file" && autosub-without-ap "$file"
				fi ) && echo -e "${RED}Autosub ${YELLOW}[$filename]${NC} fail ! Check again!${NC}" && echo "$filename" >> "$autosubfail"
				# Run Translate Function And check Autosub Comp or Fail
				! ( if [ -f "$filepath/$name.$S.$f" ] 2>/dev/null;then
					Translate
				else
					echo -e "\n${RED}File${NC} ${YELLOW}"$name.$S.$f"${NC} ${RED}not Exist , PLEASE CHECK AGAIN${NC}\n"
				fi ) && echo -e "${RED}Translate Subtitle ${YELLOW}[$name.$S.$f]${NC} Fail! Check again!${NC}" && echo "$filename" >> "$autosubfail"
				# Check Video Comp or Fail to text file
				[ -f "$filepath/$name.$f" ] 2>/dev/null && echo "$filename" >> "$autosubcomp"
			fi
		fi
	done < "$HOME/listfile.txt"
	rm -f "$HOME/listfile.txt"
else
	echo -e "\n${GREEN}AUTOSUB CHO TUNG FILE DUOC CHON${NC}\n"
	config
	for file in "$@" ;do
		# Get filename and path
		filebasename "$file"
		## Check file Completed
		if [ "$(grep -wF "$filename" "$autosubcomp")" == "$filename" ] 2>/dev/null ;then 
			echo "$filename" >> "$autosubdone" 
			echo -e "\n${YELLOW}This video file has been Autosub${NC} ${GREEN}[$filename]${NC}\n"
		else
			# Running Autosub
			! ( if [ $noap == "yes" ] ;then
				autosub-without-ap "$file"
			else
				! autosub-with-ap "$file" && autosub-without-ap "$file"
			fi ) && echo -e "${RED}Autosub ${YELLOW}[$filename]${NC} fail ! Check again!${NC}" && echo "$filename" >> "$autosubfail"
			# Run Translate Function And check Autosub Comp or Fail
			! ( if [ -f "$filepath/$name.$S.$f" ] 2>/dev/null;then
				Translate
			else
				echo -e "\n${RED}File${NC} ${YELLOW}"$name.$S.$f"${NC} ${RED}not Exist , PLEASE CHECK AGAIN${NC}\n"
			fi ) && echo -e "${RED}Translate Subtitle ${YELLOW}[$name.$S.$f]${NC} Fail! Check again!${NC}" && echo "$filename" >> "$autosubfail"
			# Check Video Comp or Fail to text file
			[ -f "$filepath/$name.$f" ] 2>/dev/null && echo "$filename" >> "$autosubcomp"
		fi
	done
fi

# File Da Hoan Thanh
echo -e "\n${GREEN}[COMPLETED]${NC}\n"
tail -n $tailnum "$autosubcomp" 2>/dev/null
# File Khong Hoan Thanh
if [ -f "$autosubfail" ] 2>/dev/null ;then
	echo -e "\n${RED}[FAIL]${NC}\n"
	cat "$autosubfail" 2>/dev/null
	rm "$autosubfail" 2>/dev/null
fi
# File Da Autosub
if [ -f "$autosubdone" ] 2>/dev/null ;then
	echo -e "\n${YELLOW}[FAIL]${NC}\n"
	cat "$autosubdone" 2>/dev/null
	rm "$autosubdone" 2>/dev/null
fi
echo -e "\n-------------------" >> "$autosubcomp"
}

# Function List Menu
menuAutosub() {
cat << _EOF_

Main Menu: What would you like to do?

Press the number of your choice:

	1 - Autosub Japanese
	2 - Autosub Chinese (Simplified, China)
	3 - Autosub English
	4 - Translate Subtitle (Japanese Default)
	5 - Custom
	
	0 - Exit
	
_EOF_

# Wait for user to make a choice and run chosen functions:
read -r -n 1 -s choice;

	case $choice in
	
		1 )  # Autosub Japanese
			control-autosub "$@"
		;;
			
		2 )	# Autosub Chinese (Simplified, China)
			S="cmn-hans-cn"
			src="zh-cn"
			control-autosub "$@"
		;;
			
		3 )	# Autosub English
			S="en-us"
			src="en"
			control-autosub "$@"
		;;
			
		4 )	# Translate (Japanese)
			echo -e "Config Language ?"
			if ! ask_user ;then
				for file in "$@" ;do
					# Info for Base Name
					filebasename "$file"
					# Translate Subtitle
					if ! Translate ;then
						echo -e "${YELLOW}[$filename]${NC} ${RED}is FAIL${NC}"
						echo -e "${RED}Please Translate Again${NC}"
					else
						echo -e "\n${GREEN}Translate [$filename] is DONE${NC}"
					fi
				done
			else
				# Option for Custom Translate
				read -p -r 'Enter Video Language /src : ' src1
				# Display list SRC Support
				if [ -n "$(autosub -lsc | grep -i "$src1")" ] 2>/dev/null ;then
					echo -e "${LIGHTBLUE}$(autosub -lsc | grep -i "$src1")${NC}\n"
					read -p -r 'Enter the "SRC Language" parameter as above /Ex: en-us : ' src
				else
					echo -e "${RED}Language does not exist or does not support !${NC}"
				fi
				echo 
				read -p -r 'Enter Destination Language /d : ' d1
				# Display list D Support
				if [ -n "$(autosub -ltc | grep -i "$d1")" ] 2>/dev/null ;then
					echo -e "${LIGHTBLUE}$(autosub -ltc | grep -i "$d1")${NC}\n"
					read -p -r 'Enter the "DST Language" parameter as above /Ex: en : ' d
				else
					echo -e "${RED}Language does not exist or does not support !${NC}"
				fi
			fi
			clear
		;;
			
		5 ) # Custom
			clear
			read -p -r 'Nhap Ngon Ngu Muon Dich Sang: ' S1
			# Display S Support
			if [ -n "$(autosub -lsc | grep -i "$S1")" ] 2>dev/null ;then
				echo -e "Nhap Ngon Ngu S Nhu Tren /Default $S: "
				read -r S
				[[ -z "$S" ]] && S="ja-jp"
			fi
			read -p -r 'Nhap Ngon Ngu Nhan Dang Dich SRC: ' src1
			# Display SRC Support
			if [ -n "$(autosub -ltc | grep -i "$src1")" ] 2>dev/null ;then
				echo -e "Nhap Ngon Ngu Dich SRC Nhu Tren /Default ${ORANGE}$src${NC}: "
				read -r src
				[[ -z "$src" ]] && src="ja"
			fi
			read -p -r 'Nhap ngon ngu muon dich sang D: ' d1
			# Display D Support
			if [ -n "$(autosub -ltc | grep -i "$d1")" ] 2>/dev/null ;then
				echo -e "Nhap Ngon Ngu Muon Dic Sang D /Default ${ORANGE}$d${NC}: "
				read -r d
				[[ -z "$d" ]] && d="vi"
			fi
			echo -e "Nhap Threesold et /Default ${ORANGE}$et${NC} : "
			read -r et
			[[ -z "$et" ]] && et="5"
			echo -e "Nhap Dinh Dang Sub /Default ${ORANGE}$f${NC} : "
			read -r f
			[[ -z "$f" ]] && f="srt"
			echo -e "Nhap mnrs /Default ${ORANGE}$mnrs${NC} : "
			read -r mnrs
			[[ -z "$mnrs" ]] && mnrs="0.5"
			echo -e "Nhap mxrs /Default ${ORANGE}$mxrs${NC} : "
			read -r mxrs
			[[ -z "$mxrs" ]] && mxrs="4"
			clear
			echo -e "\n--------------------------------- " >> "$autosubcomp"
			CASEautosub "$@"
		;;
		
		0 )	# Break Menu
			return
			clear
			echo -e "${LIGHTBLUE}Da Out${NC}"
		;;
			
		* )	# Not Valid Choice
			clear
			echo -e "\n${RED}Not a valid choice${NC}"
			echo -e "${RED}Please choice some number${NC}\n"
			menuAutosub "$@"
		;;
		
		
			
	esac
}

################### Running Code ######################
#######################################################

# Info
clear
echo -e "${ORANGE}+-----------------------+${NC}"
echo -e "${ORANGE}|Autosub Translate Video|${NC}"
echo -e "${ORANGE}+-----------------------+${NC}\n"

# Python 3.8 Env for Autosub
if [ -f "$HOME/autosub-env/env/bin/activate" ] ;then
source "$HOME/autosub-env/env/bin/activate" 2>/dev/null
fi

# Check yes/no and Autosub for each file in folder
	if [ "$?" -eq "0" ] 2>/dev/null ;then
		menuAutosub "$@"
	else
		echo -e "\n${RED}Fail to Env Python for Autosub${NC}"
		echo -e "${RED}Please Install Python Env and Install Autosub${NC}\n"
		exit 1
	fi
if [ -f "$HOME/autosub-env/env/bin/activate" ] ;then
deactivate
fi

echo -e "\n${LIGHTCYAN}DONE ALL${NC}"
echo -e "${LIGHTCYAN}THANK YOU FOR USING${NC}"
cleanAutosub 2>/dev/null

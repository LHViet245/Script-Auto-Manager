#! /bin/bash

# Autoset up if you not a sudoer or root
##################################################################################################################################
#############################################
#
# Script made by Starfall
#
# Auto install autosub By BingLingGroup .Soucre: "https://github.com/BingLingGroup/autosub"
# Auto install Rclone
# Auto install script Run Autosub and Copy file to Drive with Rclone easy By Starfall. Soucre: "https://github.com/rclone/rclone"
#
##############################################
##################################################################################################################################
if [[ -d "$HOME/.local/bin" ]] || [[ -d "$HOME/bin" ]] ;then
  echo "export PATH="$HOME/bin:$HOME/.local/bin:$PATH"" >> ~/.bashrc
  souce ~/.bashrc
else
  mkdir -p $HOME/.local/bin && mkdir -p "$HOME/bin"
  echo "export PATH="$HOME/bin:$HOME/.local/bin:$PATH"" >> ~/.bashrc
  souce ~/.bashrc
fi
rundir="$(dirname "$(readlink -f "$0")")"
path_python39="$HOME/.local/python3.9"
source_script="$HOME/.auto-manager-server"

[[ ! -d "$source_script" ]] && mkdir -p "$source_script"
# function to ask user for y/n response
function ask_user(){
local answer
while true
  do
	read -r -n 1 answer
	case $answer in [Yy]* ) echo "" && return 0 ;;
					[Nn]* ) echo "" && return 1 ;;
						* ) echo -e "\nEnter y or n";;
	esac
  done
}

# Check installed package
function installed() {
  if [[ "$(dpkg-query -W -f='${Status}' "$1" 2>/dev/null | grep -wc "ok installed")" -eq 0 ]]; then
	return 1
  else
	return 0
  fi
}

# Fuction pip install package
function pip_install() {
	if [[ $env == "yes" ]] ;then
		python3.9 -m pip install $* || echo "Install $* FAIL" && exit 1
	else
		python3.9 -m pip install --user $* || echo "Install $* FAIL" && exit 1
	fi
}

# Function compare version
vercomp () {
	local ver1
	local ver2
	if [[ $1 == $2 ]]
	then
		return 0
	fi
	local IFS=.
	local i ver1=($1) ver2=($2)
	# fill empty fields in ver1 with zeros
	for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
	do
		ver1[i]=0
	done
	for ((i=0; i<${#ver1[@]}; i++))
	do
		if [[ -z ${ver2[i]} ]]
		then
			# fill empty fields in ver2 with zeros
			ver2[i]=0
		fi
		if ((10#${ver1[i]} > 10#${ver2[i]}))
		then
			return 1
		fi
		if ((10#${ver1[i]} < 10#${ver2[i]}))
		then
			return 2
		fi
	done
	return 0
}

# Function compare version
testvercomp () {
	local op
	vercomp $1 $2
	case $? in
		0) op='=';;
		1) op='>';;
		2) op='<';;
	esac
	if [[ $op != $3 ]]
	then
		#echo "FAIL: Expected '$3', Actual '$op', Arg1 '$1', Arg2 '$2'"
		return 1
	else
		#echo "Pass: '$1 $op $2'"
		return 0
	fi
}

# Check packed for build python --prefix="$HOME/.local/python3.9"
function packages_for_python() {
num_fail=0
echo -ne "\nCheck Zlib - "
installed zlib1g-dev && echo "OK" || echo "FAIL" && num_fail=$num_fail+1

echo -n "Check libbz2-dev"
installed libbz2-dev && echo "OK" || echo "FAIL" && num_fail=$num_fail+1

echo -n "Check libffi-dev"
installed libffi-dev && echo "OK" || echo "FAIL" && num_fail=$num_fail+1

echo -n "Check libssl-dev"
installed libssl-dev && echo "OK" || echo "FAIL" && num_fail=$num_fail+1

echo -n "Check libc6-dev"
installed libc6-dev && echo "OK" || echo "FAIL" && num_fail=$num_fail+1

echo -n "Check libgdbm-dev"
installed libgdbm-dev && echo "OK" || echo "FAIL" && num_fail=$num_fail+1

echo -n "Check tk-dev"
installed tk-dev && echo "OK" || echo "FAIL" && num_fail=$num_fail+1

echo -n "Check libsqlite3-dev"
installed libsqlite3-dev && echo "OK" || echo "FAIL" && num_fail=$num_fail+1

echo -n "Check libncursesw5-dev"
installed libncursesw5-dev && echo "OK" || echo "FAIL" && num_fail=$num_fail+1

echo -n "Check libreadline-gplv2-dev"
installed libreadline-gplv2-dev && echo "OK" || echo "FAIL" && num_fail=$num_fail+1
}

function install_python39() {
  echo "Installing Python 3.9"
  echo "Checking the packages needed to install python"
  packages_for_python
  if [[ $num_fail -ne 0 ]] ;then
	echo "There are $num_fail packages that are not installed, which may cause build errors or unstable operation."
	echo "Still continuing to install? (y/n)"
	! ask_user && echo "Python 3 not installed" && exit 1
  else
	echo "OK ALL"
  fi
	echo "Will install in '$path_python39'"
	mkdir -p "$path_python39"
	cd && wget https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz
	tar -zxvf ~/sqlite-autoconf-3360000.tar.gz && rm ~/sqlite-autoconf-3360000.tar.gz
	cd ~/sqlite-autoconf-3360000 || exit 1
	./configure --prefix="${path_python39}"
	make
	make install && echo "Install sqlite3 completed"
	
	cd && wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tar.xz
	tar -zxvf ~/Python-3.9.6.tar.xz && rm ~/Python-3.9.6.tar.xz
	cd ~/Python-3.9.6
	LD_RUN_PATH=${path_python39}/lib ./configure
	LDFLAGS="-L ${path_python39}/lib"
	CPPFLAGS="-I ${path_python39}/include"
	LD_RUN_PATH=${path_python39}/lib make
	./configure --prefix="${path_python39}"
	make
	! make altinstall && echo "Install Failed" && exit 1 || echo "Python 3.9 installed"
	cd "$HOME"
	rm -rf ~/Python-3.9.6 ~/sqlite-autoconf-3360000
	echo "export PATH="$path_python39/bin:$PATH"" >> "$HOME/.bashrc"
	source "$HOME/.bashrc"
	echo "Will update pip"
	python3.9 -m pip install --upgrade pip && echo "Pip updated"
}

function install_autosub() {
  num_fail=0
  echo -ne "\nCheck ffmpeg version above 4* - "
  if installed ffmpeg && [[ $(ffmpeg -version | head -n 1 | awk '{print $3}' | awk -F. '{print $1}') -ge 4 ]];then
	echo "OK"
  else
	echo "FAIL"
	echo "Installing ffmpeg - Will install in ~/.local/bin"
	cd && wget https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz
	tar -xvf ~/ffmpeg-git-amd64-static.tar.xz && rm ~/ffmpeg-git-amd64-static.tar.xz 2>/dev/null
	cd ffmpeg-git* || exit 1
	mv ffmpeg ~/.local/bin && mv ffprobe ~/.local/bin && mv qt-faststart ~/.local/bin
	cd && rm -rf ~/ffmpeg-git* 2>/dev/null
	echo "Installed ffmpeg version $(ffmpeg -version | head -n 1 | awk '{print $3}')"
  fi

  echo "Installing langcode"
  cd "$HOME"
  git clone https://github.com/rspeer/langcodes.git || wget https://github.com/rspeer/langcodes/archive/refs/heads/master.zip && unzip ~/master.zip && rm ~/master.zip 2>/dev/null
  cd langcodes 2>/dev/null || cd master 2>/dev/null
  python3.9 setup.py install
  cd "$HOME"
  rm -rf ~/langcodes 2>/dev/null || rm -rf ~/master 2>/dev/null
  
  echo "Installing ffmpeg-normalize"
  if [[ $(pip3.9 list | grep -wc ffmpeg-normalize) -eq 0 ]] ;then
  	pip_install ffmpeg-normalize || exit 1
  fi

  echo "Installing Wheel"
  if [[ $(pip3.9 list | grep -wc wheel) -eq 0 ]] ;then
  	pip_install wheel || exit 1
  fi

  echo "Installing python-Levenshtein"
  if [[ $(pip3.9 list | grep -wc python-Levenshtein) -eq 0 ]] ;then
  	pip_install python-Levenshtein || exit 1
  fi

  echo "Installing fuzzywuzzy"
  if [[ $(pip3.9 list | grep -wc fuzzywuzzy) -eq 0 ]] ;then
  	pip_install fuzzywuzzy || exit 1
  fi

  echo "Insalling autosub"
  git clone https://github.com/BingLingGroup/autosub.git || wget https://github.com/BingLingGroup/autosub/archive/refs/heads/dev.zip && unzip ~/dev.zip && rm ~/dev.zip 2>/dev/null
  cd ~/autosub 2>/dev/null || cd ~/dev 2>/dev/null
  if ! python3.9 setup.py install ;then
	pip_install idna==2.* httpcore==0.9.* chardet==3.* hstspreload
	python3.9 setup.py install
  fi
  echo "Install Completed"
  autosub --version || echo "Install autosub fail" && exit 1
  cd "$HOME"
  rm -rf ~/autosub 2>/dev/null || rm -rf ~/dev 2>/dev/null
}	


######################## RUNING CODE #######################
# Check and install python3
echo -ne "Check Python3 - "
if installed python3 ;then
  echo "Installed Version $(python3 -V | awk '{print $NF}')"
  if testvercomp "$(python3 -V | awk '{print $NF}')" "3.9.6" "<" ;then
	echo "Verion python has new version 3.9. Do you want to update? (y/n)"
	echo "The current version is still usable."
	ask_user && install_python39
  elif testvercomp "$(python3 -V | awk '{print $NF}')" "3.5.0" "<" ;then
	echo "You need python 3.5 or higher to use. Install new version now?"
	ask_user && install_python39
  fi
else
  echo "FAIL"
  install_python39
fi

# Check and install rclone
echo -ne "\nCheck Rclone - "
if which rclone 2>/dev/null ;then
  echo "Installed Version $(rclone version | head -n 1 | awk '{print $NF}')"
else
  echo "Installing Rclone - Will install in ~/.local/bin"
  cd && wget https://downloads.rclone.org/rclone-current-linux-amd64.zip
  unzip ~/rclone-*.zip && rm ~/rclone-*.zip
  cp ~/rclone-*/rclone ~/.local/bin
  rm -r ~/rclone-*
  echo "Installed Rclone" &&  rclone version
fi

# Check and install autosub
echo -ne "Check autusub - "
if which autosub 2>/dev/null ;then
  echo "Installed Version $(autosub --version | awk '{print $2}')"
elif [[ -f  "$HOME/.auto-manager-server/autosub-env/bin/activate" ]] ;then
  source "$source_script/autosub-env/bin/activate" && env="yes"
  which autosub 2>/dev/null && echo "Installed Version $(autosub --version | awk '{print $2}')"
else
  echo "Install autosub under Virtual Environments ? (y/n)"
  echo "Virtual Environments will be installed in ~/.auto-manager-server/autosub-env"
  if ask_user ;then
	env="yes"
	python3.9 -m venv "$source_script/autosub-env"
	source $source_script/autosub-env/bin/activate || echo "Fail to create Virtual Environments" && exit 1
  fi
  echo "Installing autosub by Bing Ling <binglinggroup@outlook.com>"
  ! install_autosub && echo "Install autosub fail"
fi


echo "Installing atmanager"
cd "$HOME"
git clone -q https://github.com/LHViet245/Script-Auto-Manager.git "$source_script"
cd "$source_script/Script-Auto-Manager" || { echo "cd to /etc/atsinstall Failure"; exit 1; }
ln -sf "$source_script"/Script-Auto-Manager/scripts/* ~/.local/bin
ln -sf "$source_script"/Script-Auto-Manager/feature/* ~/.local/bin
ln -sf "$source_script"/Script-Auto-Manager/install-for-all-user ~/.local/bin
ln -sf "$source_script"/Script-Auto-Manager/install-for-local-user ~/.local/bin
# chmod +x ~/.local/bin/.atsrun 
# chmod +x ~/.local/bin/.cptodrive
# chmod +x ~/.local/bin/install-for-all-user
# chmod +x ~/.local/bin/install-for-local-user
# chmod +x ~/.local/bin/get-function

echo "Installation complete"
echo
echo "Run rclone config tho config your dirve"
echo "You can now run .atsrun and .cptodrive"

if [ "$rundir" != "$source_script/Script-Auto-Manager" ]; then
    rm -f "$rundir/autosubsetup"
fi